// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  password              String?
  verified              Boolean             @default(false)
  attempts              Int                 @default(0)
  blocked               Boolean             @default(false)
  verificationCode      String?             @map("verification_code")
  resetPasswordCode     String?             @map("reset_password_code")
  auth                  Auth[]
  userProfile           UserProfile?
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @default(now()) @map("updated_at")
}

model Auth {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])    
  userId        String    @map("user_id")
  refreshToken  String    @map("refresh_token")
  userAgent     String    @map("user_agent")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
}

model UserProfile {
  id                        String              @id @default(uuid())
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String              @unique @map("user_id")
  name                      String?
  lastname                  String?
  image                     String?
  surveyAnswered            Boolean             @default(false) @map("survey_answered")
  financialProfileData      FinancialProfile?
  financialData             FinancialData?
  financialProfileResults   String?             @map("financial_profile")
  itemsSaved                String[]            @map("items_saved")
  updatedAt                 DateTime            @default(now()) @map("updated_at")
}

model FinancialProfile {
  id                              String                @id @default(uuid())
  userProfile                     UserProfile?          @relation(fields: [userProfileId], references: [id])
  userProfileId                   String?               @unique @map("user_profile_id")
  // PREGUNTAS PRIORITARIAS
  financialGoals                  String                @map("financial_goals")
  investmentKnowledge             String                @map("investment_knowledge")
  financialEducation              String                @map("financial_education")
  investmentExperience            String[]              @map("investment_experience")
  riskReactions                   String                @map("risk_reactions")
  investmentTimeframes            String                @map("investment_timeframes")
  incomeSources                   String                @map("income_sources")
  incomeRanges                    String                @map("income_ranges")
  expenseRatios                   String                @map("expense_ratios")
  // PREGUNTAS SECUNDARIAS
  investmentPurpose               String?               @map("investment_purpose")
  age                             Int?
  occupation                      String?
  savingsPlans                    String?               @map("savings_plans")
  savingsRanges                   String?               @map("savings_ranges")
  // monthlyContribution          String?               @map("monthly_contribution")
}

model FinancialData {
  id                  String            @id @default(uuid())
  profileUser         UserProfile?      @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  userProfileId       String?           @unique @map("user_id")
  income              Int               @default(0)
  expenses            Int               @default(0)
}