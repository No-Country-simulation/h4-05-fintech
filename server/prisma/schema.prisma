// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  password              String
  verified              Boolean             @default(false)
  attempts              Int                 @default(0)
  blocked               Boolean             @default(false)
  profileCreated        Boolean             @default(false) @map("profile_created")
  code                  String?
  expiration            DateTime?
  auth                  Auth?
  financialProfile      FinancialProfile?
  financialData         FinancialData?
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @default(now()) @map("updated_at")
}

model Auth {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])    
  userId        String    @unique @map("user_id")
  refreshToken  String    @map("refresh_token")
  userAgent     String    @map("user_agent")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
}

model FinancialProfile {
  id                    String                @id @default(uuid())
  user                  User?                 @relation(fields: [userId], references: [id])
  userId                String?               @unique @map("user_id")
  financialGoal         FinancialGoals        @map("financial_goal")
  financialKnowledge    FinancialKnowledge    @map("financial_knowledge")
  financialOptions      FinancialOptions      @map("financial_options")  
  targetPeriod          String                @map("target_period")
  age                   Int?
  occupation            String?
  preference            FinancialPreference?
  incomeSource          String?               @map("income_source")
  incomeAverage         Int?                  @map("income_average")
  expensesAverage       Int?                  @map("expenses_average")
  savingPlan            Boolean?              @map("saving_plan")
  planDescription       String?               @map("plan_description")
  contribution          Int?
}

model FinancialData {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique @map("user_id")
  income    Int       @default(0)
  expenses  Int       @default(0)
}

enum FinancialGoals {
  JUBILACION
  VACACIONES
  IMPREVISTOS
  VIVIENDA
  EDUCACION
  LIBERTAD_FINANCIERA
  OTROS
}

enum FinancialKnowledge {
  BASICO
  INTERMEDIO
  AVANZADO
  NINGUNO
}

enum RiskTolerance {
  CONSERVADOR
  MODERADO
  ARRIESGADO
}

enum FinancialPreference {
  AHORRO
  INVERSION
}

enum FinancialOptions {
  ACCIONES
  CDEARS
  BONOS
  CFD
  ETFS
  OTROS
}